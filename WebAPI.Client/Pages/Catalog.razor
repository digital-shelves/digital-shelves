@page "/catalog"
@inject HttpClient Http

@using System.Text.Json
@using WebAPI.Shared;

<!-- Main Container -->
<div class="catalog-page-container">
    <h1>Catalog</h1>
    <p>Browse and discover items available for checkout from the library. Search for useful resources beyond books!</p>

    <!-- Search Bar -->
    <div class="search-container">
        <input @bind="searchQuery" placeholder="Search items..." class="search-bar" />
        <button @onclick="SearchItems" class="search-button">Search</button>
    </div>

    <!-- Results Section -->
    @if (isLoading)
    {
        <p>Loading...</p>
    }
    else if (items != null && items.Any())
    {
        <table class="catalog-table">
            <thead>
                <tr>
                    <th>Image</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Availability</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in items)
                {
                    <tr>
                        <td class="image-cell">
                            @if (!string.IsNullOrEmpty(item.ImageURL))
                            {
                                <img src="@item.ImageURL" alt="@item.Name" class="item-image"
                                     @onerror="@(e => HandleImageError(e, item))" />
                            }
                            else
                            {
                                <div class="placeholder-image">No Image</div>
                            }
                        </td>
                        <td class="name-cell">@item.Name</td>
                        <td class="description-cell">@item.Description</td>
                        <td class="availability-cell">
                            @if (item.AmountAvailable > 0)
                            {
                                <span class="available">@item.AmountAvailable available</span>
                            }
                            else
                            {
                                <span class="unavailable">Out of stock</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else if (items != null && !items.Any())
    {
        <p>No results found.</p>
    }
</div>

@code {
    private string searchQuery = string.Empty;
    private List<Item> items = new List<Item>();
    private bool isLoading;
    private string? errorMessage;

    private void HandleImageError(ErrorEventArgs e, Item item)
    {
        item.ImageURL = "https://via.placeholder.com/150";
    }

    private async Task SearchItems()
    {
        try
        {
            isLoading = true;
            var encodedQuery = Uri.EscapeDataString(searchQuery);

            var response = await Http.GetAsync($"api/items/search?query={encodedQuery}");
            if (response.IsSuccessStatusCode)
            {
                var jsonString = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Debug - Raw JSON: {jsonString}");

                var options = new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = false, 
                        PropertyNamingPolicy = JsonNamingPolicy.SnakeCaseLower, 
                        WriteIndented = true
                    };

                try
                {
                    var result = JsonSerializer.Deserialize<List<Dictionary<string, JsonElement>>>(jsonString, options);
                    if (result != null)
                    {
                        items = result.Select(dict => new Item
                            {
                                ID = dict.GetValueOrDefault("id").GetInt32(),
                                Name = dict.GetValueOrDefault("name").GetString() ?? "",
                                Description = dict.GetValueOrDefault("description").GetString() ?? "",
                                AmountAvailable = dict.GetValueOrDefault("amount_available").GetInt32(),
                                ImageURL = dict.GetValueOrDefault("img_url").GetString() ?? ""
                            }).ToList();

                        Console.WriteLine($"Debug - Deserialized {items.Count} items");
                        foreach (var item in items)
                        {
                            Console.WriteLine($"Debug - Item after mapping: Name={item.Name}, Amount={item.AmountAvailable}, URL={item.ImageURL}");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Debug - Deserialization error: {ex.Message}");
                    items = new List<Item>();
                }
            }
            else
            {
                Console.WriteLine($"Debug - HTTP Error: {response.StatusCode}");
                errorMessage = $"Server returned status code: {response.StatusCode}";
                items = new List<Item>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Debug - Error: {ex.Message}");
            errorMessage = "Error searching items";
            items = new List<Item>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}