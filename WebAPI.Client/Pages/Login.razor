@page "/login"
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavManager

<h1>Admin Login</h1>
<p>Log in as an administrator to edit items quantities.</p>

<div>
    <div class="form-group">
        <label for="username">Username:</label>
        <input type="text" id="username" @bind="username" class="form-control" />
    </div>
    <div class="form-group">
        <label for="password">Password:</label>
        <input type="password" id="password" @bind="password" class="form-control" />
    </div>
    <button class="btn btn-primary" @onclick="HandleLogin">Login</button>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">
            @errorMessage
        </div>
    }
</div>

@code {
    private string username = "";
    private string password = "";
    private string errorMessage = "";

    private async Task HandleLogin()
    {
        try
        {
            var loginData = new Dictionary<string, string>
        {
            { "username", username },
            { "password", password }
        };

            var response = await Http.PostAsJsonAsync("api/auth/login/", loginData);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                if (result?.Token != null)
                {
                    // Store the token
                    await JS.InvokeVoidAsync("localStorage.setItem", "token", result.Token);
                    await JS.InvokeVoidAsync("localStorage.setItem", "username", username);
                    await JS.InvokeVoidAsync("localStorage.setItem", "isAuthenticated", "true");

                    await JS.InvokeVoidAsync("alert", "Login successful!");
                    NavManager.NavigateTo("/admin", true);
                }
            }
            else
            {
                errorMessage = "Invalid username or password";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login";
            Console.WriteLine($"Login error: {ex.Message}");
        }
    }

    public class LoginResponse
    {
        public string? Token { get; set; }
        public string? Message { get; set; }
    }
}